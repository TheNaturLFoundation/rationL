.\" Automatically generated by Pandoc 2.11.4
.\"
.TH "regex_match" "3" "April 5, 2021" "rationL 0.1.0" "rationL User Manual"
.hy
.SH NAME
.PP
regex_match \[en] Matche a string from against a compiled regular
expression
.SH SYNOPSIS
.IP
.nf
\f[C]
#include <rationl.h>

int regex_match(reg_t re, char *string);
\f[R]
.fi
.SH DESCRIPTION
.PP
\f[B]regex_match()\f[R] matches a regular expression against a string
and returns true(1) if the regular expression matches the string or
false(0) otherwise.
.PP
\f[I]re\f[R] The regular expression that was compiled using
\f[B]regex_compile\f[R]
.PP
\f[I]string\f[R] The string to match the regular expression against
.SH RETURN VALUE
.PP
\f[B]regex_match()\f[R] returns true(1) if the string passed as
parameter is matched by the regular expression false(0) if not.
.SH EXAMPLES
.PP
\f[B]Program that matches an email address passed as first
parameter\f[R]
.IP
.nf
\f[C]
#include <rationl.h>
#include <err.h>
#include <stdio.h>

int main(int argc, char** argv)
{
    if(argc != 2)
        errx(1, \[dq]No input email address found.\[dq]);

    reg_t re = regex_compile(\[dq]\[rs]\[rs]w+(\[rs]\[rs].\[rs]\[rs]w+)?\[at]\[rs]\[rs]w+(\[rs]\[rs].[a-z]{2,})+\[dq]);

    if(regex_match(re, argv[1]))
        printf(\[dq]%s is a valid email.\[rs]n\[dq], argv[1]);
    else
        printf(\[dq]%s is not a valid email.\[rs]n\[dq], argv[1]);
    regex_free(re);
    return 0;
}
\f[R]
.fi
